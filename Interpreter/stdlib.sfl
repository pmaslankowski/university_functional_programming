{ SFL Standard library }

let if = \x -> \y -> \z ->
  case x of 0: z;
            ! a: y

in

let prev = \x ->
  case x of 1: 0;
            ! z: z
in

let add = \x -> \y ->
  case x of 0: y;
            ! z: ! add z y
in

let sub = \x -> \y ->
  case x of y: 0;
            ! z: ! sub z y
in

let mul = \x -> \y ->
  case x of 1: y;
            ! z: (add y) (mul z y)
in

let div = \x -> \y ->
  case x of y: 1;
            ! z: ! div (sub x y) y
in

div (mul 4 3) (add 5 1)
